import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

// 1, 5, 3, 6, 2, 4
// Firing Order

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
    output wire5: ignition_wire();
    output wire6: ignition_wire();
}

label cycle(2 * 360 * units.deg)
public node ignition_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 1800 * units.rpm;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit)
            .connect_wire(wires.wire1, (0.0/6.0) * cycle)
            .connect_wire(wires.wire5, (1.0/6.0) * cycle)
			.connect_wire(wires.wire3, (2.0/6.0) * cycle)
			.connect_wire(wires.wire6, (3.0/6.0) * cycle)
			.connect_wire(wires.wire2, (4.0/6.0) * cycle)
			.connect_wire(wires.wire4, (5.0/6.0) * cycle);
}

private node add_sym_sample {
    input angle;
    input lift;
    input this;
    alias output __out: this;

    this.add_sample(angle * units.deg, lift * units.thou)
    this.add_sample(-angle * units.deg, lift * units.thou)
}

public node cummins_140_lobe_profile_int {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 163 * units.deg,
            gamma: 0.8,
            lift: 0.237 * units.inch,
            steps: 100
        );
}

public node cummins_140_lobe_profile_exh {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 191 * units.deg,
            gamma: 0.8,
            lift: 0.299 * units.inch,
            steps: 100
        );
}

public node cummins_140_camshaft_builder {
    input lobe_profile: cummins_140_lobe_profile_int();
	input ex_lobe_profile: cummins_140_lobe_profile_exh();
    input intake_lobe_profile: lobe_profile;
    input exhaust_lobe_profile: ex_lobe_profile;
    input lobe_separation: 98.5 * units.deg;
    input intake_lobe_center: lobe_separation;
    input exhaust_lobe_center: 105.0 * units.deg;
    input advance: 0.0 * units.deg;
    input base_radius: 0.6 * units.inch;

    output intake_cam_0: _intake_cam_0;
    output exhaust_cam_0: _exhaust_cam_0;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_0(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_0(params, lobe_profile: exhaust_lobe_profile)


    label rot60(60 * units.deg)
    label rot90(90 * units.deg)
    label rot120(120 * units.deg)
    label rot180(180 * units.deg)
    label rot360(360 * units.deg)

    _intake_cam_0
        .add_lobe(rot360 + intake_lobe_center)
		.add_lobe(rot360 + intake_lobe_center + 4 * rot120)
		.add_lobe(rot360 + intake_lobe_center + 2 * rot120)
		.add_lobe(rot360 + intake_lobe_center + 5 * rot120)
		.add_lobe(rot360 + intake_lobe_center + 1 * rot120)
		.add_lobe(rot360 + intake_lobe_center + 3 * rot120)

	_exhaust_cam_0
        .add_lobe(rot360 - exhaust_lobe_center)
        .add_lobe(rot360 - exhaust_lobe_center + 4 * rot120)
		.add_lobe(rot360 - exhaust_lobe_center + 2 * rot120)
		.add_lobe(rot360 - exhaust_lobe_center + 5 * rot120)
		.add_lobe(rot360 - exhaust_lobe_center + 1 * rot120)
		.add_lobe(rot360 - exhaust_lobe_center + 3 * rot120)
}

public node cummins_140 {
    alias output __out: engine;

    wires wires()

    engine engine(
        name: "14.0L Cummins Diesel",
        starter_torque: 500 * units.lb_ft,
        redline: 1600 * units.rpm,
        fuel: fuel(
            max_turbulence_effect: 4.0,
            burning_efficiency_randomness: 0.2,
            max_burning_efficiency: 0.9)
    )

    crankshaft c0(
        throw: 0.5 * 5.98 * units.inch,
        flywheel_mass: 120 * units.lb,
        mass: 135 * units.lb,
        friction_torque: 10.0 * units.lb_ft,
        moment_of_inertia: 0.22986844776863666 * 0.9,
        position_x: 0.0,
        position_y: 0.0,
        tdc: constants.pi / 2
    )

    rod_journal rj0(angle: (0.0 / 4.0) * 360 * units.deg)
    rod_journal rj1(angle: (1.0 / 4.0) * 360 * units.deg)
    rod_journal rj2(angle: (2.0 / 4.0) * 360 * units.deg)
    rod_journal rj3(angle: (2.0 / 4.0) * 360 * units.deg)
    rod_journal rj4(angle: (1.0 / 4.0) * 360 * units.deg)
    rod_journal rj5(angle: (0.0 / 4.0) * 360 * units.deg)

    c0
        .add_rod_journal(rj0)
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)
        .add_rod_journal(rj4)
        .add_rod_journal(rj5)

    piston_parameters piston_params(
        mass: 400 * units.g,
        compression_height: 1.0 * units.inch,
        wrist_pin_position: 0 * units.mm,
        displacement: 0.0 * units.mm
    )

    connecting_rod_parameters cr_params(
        mass: 4 * units.lb,
        moment_of_inertia: 0.0015884918028487504,
        center_of_mass: 0.0,
        length: 12 * units.inch
    )

    cylinder_bank_parameters bank_params(
        bore: 5.50 * units.inch,
        deck_height: 16.25 * units.inch
    )

    intake intake(
        plenum_volume: 12.5 * units.L,
        plenum_cross_section_area: 35.0 * units.cm2,
        intake_flow_rate: k_carb(850.0),
        idle_flow_rate: k_carb(0.0),
        idle_throttle_plate_position: 0.99,
        throttle_gamma: 1.0
    )

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(200.0),
        primary_tube_length: 7.0 * units.inch,
        primary_flow_rate: k_carb(100.0),
        velocity_decay: 0.85,
        volume: 55.0 * units.L
    )

    exhaust_system exhaust0(es_params, audio_volume: 1.0, impulse_response: ir_lib.default_0)

    cylinder_bank b0(bank_params, angle: 0)
    b0
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.2)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire1
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.2)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire2
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.2)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire3
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.2)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire4
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.2)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire5
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.2)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj5,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire6
        )

    engine
        .add_cylinder_bank(b0)

    engine.add_crankshaft(c0)

    harmonic_cam_lobe lobe(
        duration_at_50_thou: 256 * units.deg,
        gamma: 1.1,
        lift: 10.2 * units.mm,
        steps: 100
    )

    cummins_140_camshaft_builder camshaft(
	    lobe_profile: cummins_140_lobe_profile_int(),
		ex_lobe_profile: cummins_140_lobe_profile_exh()
	)

    b0.set_cylinder_head (
        generic_small_engine_head(
            intake_camshaft: camshaft.intake_cam_0,
            exhaust_camshaft: camshaft.exhaust_cam_0
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 12 * units.deg)
        .add_sample(1000 * units.rpm, 12 * units.deg)
        .add_sample(2000 * units.rpm, 20 * units.deg)

        engine.add_ignition_module(
        ignition_distributor(
            wires: wires,
            timing_curve: timing_curve,
            rev_limit: 1800 * units.rpm
        )
    )

}
